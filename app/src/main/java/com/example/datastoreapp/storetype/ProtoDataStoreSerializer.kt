package com.example.datastoreapp.storetypeimport android.content.Contextimport androidx.datastore.core.CorruptionExceptionimport androidx.datastore.core.DataStoreimport androidx.datastore.core.Serializerimport androidx.datastore.dataStoreimport com.example.datastoreapp.proto.UserDataimport com.google.protobuf.InvalidProtocolBufferExceptionimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.withContextimport java.io.InputStreamimport java.io.OutputStreamobject ProtoDataStoreSerializer : Serializer<UserData> {    override val defaultValue: UserData = UserData.getDefaultInstance()    override suspend fun readFrom(input: InputStream): UserData = withContext(Dispatchers.IO) {        try {            return@withContext UserData.parseFrom(input)        } catch (exception: InvalidProtocolBufferException) {            throw CorruptionException("Cannot read proto.", exception)        }    }    override suspend fun writeTo(t: UserData, output: OutputStream) =        withContext(Dispatchers.IO) { t.writeTo(output) }}val Context.createUserDataStore: DataStore<UserData> by dataStore(    fileName = "user_data.pb",    serializer = ProtoDataStoreSerializer)