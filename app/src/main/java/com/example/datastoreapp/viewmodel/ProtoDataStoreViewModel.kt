package com.example.datastoreapp.viewmodelimport androidx.datastore.core.DataStoreimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.datastoreapp.UserInfoimport com.example.datastoreapp.proto.UserDataimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.collectLatestimport kotlinx.coroutines.launchclass ProtoDataStoreViewModel(private val userData: DataStore<UserData>) : ViewModel() {    private val userInfoMutableLiveData = MutableLiveData<UserInfo>()    val userInfoLiveData: LiveData<UserInfo>        get() = userInfoMutableLiveData    fun saveInfoPressed(name: String, inputAge: String) {        val age = if(inputAge.isEmpty()) -1 else inputAge.toInt()        viewModelScope.launch(Dispatchers.IO) {            userData.updateData {                it.toBuilder().apply {                    userAge = age                    userName = name                }.build()            }        }    }    fun loadInfoPressed() {        viewModelScope.launch(Dispatchers.IO) {            userData.data.collectLatest {                userInfoMutableLiveData.postValue(                    UserInfo(                        it.userName,                        it.userAge                    )                )            }        }    }}